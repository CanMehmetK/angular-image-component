{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let CropperPositionService = /*#__PURE__*/(() => {\n  class CropperPositionService {\n    resetCropperPosition(sourceImage, cropperPosition, settings) {\n      if (!(sourceImage === null || sourceImage === void 0 ? void 0 : sourceImage.nativeElement)) {\n        return;\n      }\n\n      const sourceImageElement = sourceImage.nativeElement;\n\n      if (settings.cropperStaticHeight && settings.cropperStaticWidth) {\n        cropperPosition.x1 = 0;\n        cropperPosition.x2 = sourceImageElement.offsetWidth > settings.cropperStaticWidth ? settings.cropperStaticWidth : sourceImageElement.offsetWidth;\n        cropperPosition.y1 = 0;\n        cropperPosition.y2 = sourceImageElement.offsetHeight > settings.cropperStaticHeight ? settings.cropperStaticHeight : sourceImageElement.offsetHeight;\n      } else {\n        const cropperWidth = Math.min(settings.cropperScaledMaxWidth, sourceImageElement.offsetWidth);\n        const cropperHeight = Math.min(settings.cropperScaledMaxHeight, sourceImageElement.offsetHeight);\n\n        if (!settings.maintainAspectRatio) {\n          cropperPosition.x1 = 0;\n          cropperPosition.x2 = cropperWidth;\n          cropperPosition.y1 = 0;\n          cropperPosition.y2 = cropperHeight;\n        } else if (sourceImageElement.offsetWidth / settings.aspectRatio < sourceImageElement.offsetHeight) {\n          cropperPosition.x1 = 0;\n          cropperPosition.x2 = cropperWidth;\n          const cropperHeightWithAspectRatio = cropperWidth / settings.aspectRatio;\n          cropperPosition.y1 = (sourceImageElement.offsetHeight - cropperHeightWithAspectRatio) / 2;\n          cropperPosition.y2 = cropperPosition.y1 + cropperHeightWithAspectRatio;\n        } else {\n          cropperPosition.y1 = 0;\n          cropperPosition.y2 = cropperHeight;\n          const cropperWidthWithAspectRatio = cropperHeight * settings.aspectRatio;\n          cropperPosition.x1 = (sourceImageElement.offsetWidth - cropperWidthWithAspectRatio) / 2;\n          cropperPosition.x2 = cropperPosition.x1 + cropperWidthWithAspectRatio;\n        }\n      }\n    }\n\n    move(event, moveStart, cropperPosition) {\n      const diffX = this.getClientX(event) - moveStart.clientX;\n      const diffY = this.getClientY(event) - moveStart.clientY;\n      cropperPosition.x1 = moveStart.x1 + diffX;\n      cropperPosition.y1 = moveStart.y1 + diffY;\n      cropperPosition.x2 = moveStart.x2 + diffX;\n      cropperPosition.y2 = moveStart.y2 + diffY;\n    }\n\n    resize(event, moveStart, cropperPosition, maxSize, settings) {\n      const moveX = this.getClientX(event) - moveStart.clientX;\n      const moveY = this.getClientY(event) - moveStart.clientY;\n\n      switch (moveStart.position) {\n        case 'left':\n          cropperPosition.x1 = Math.min(Math.max(moveStart.x1 + moveX, cropperPosition.x2 - settings.cropperScaledMaxWidth), cropperPosition.x2 - settings.cropperScaledMinWidth);\n          break;\n\n        case 'topleft':\n          cropperPosition.x1 = Math.min(Math.max(moveStart.x1 + moveX, cropperPosition.x2 - settings.cropperScaledMaxWidth), cropperPosition.x2 - settings.cropperScaledMinWidth);\n          cropperPosition.y1 = Math.min(Math.max(moveStart.y1 + moveY, cropperPosition.y2 - settings.cropperScaledMaxHeight), cropperPosition.y2 - settings.cropperScaledMinHeight);\n          break;\n\n        case 'top':\n          cropperPosition.y1 = Math.min(Math.max(moveStart.y1 + moveY, cropperPosition.y2 - settings.cropperScaledMaxHeight), cropperPosition.y2 - settings.cropperScaledMinHeight);\n          break;\n\n        case 'topright':\n          cropperPosition.x2 = Math.max(Math.min(moveStart.x2 + moveX, cropperPosition.x1 + settings.cropperScaledMaxWidth), cropperPosition.x1 + settings.cropperScaledMinWidth);\n          cropperPosition.y1 = Math.min(Math.max(moveStart.y1 + moveY, cropperPosition.y2 - settings.cropperScaledMaxHeight), cropperPosition.y2 - settings.cropperScaledMinHeight);\n          break;\n\n        case 'right':\n          cropperPosition.x2 = Math.max(Math.min(moveStart.x2 + moveX, cropperPosition.x1 + settings.cropperScaledMaxWidth), cropperPosition.x1 + settings.cropperScaledMinWidth);\n          break;\n\n        case 'bottomright':\n          cropperPosition.x2 = Math.max(Math.min(moveStart.x2 + moveX, cropperPosition.x1 + settings.cropperScaledMaxWidth), cropperPosition.x1 + settings.cropperScaledMinWidth);\n          cropperPosition.y2 = Math.max(Math.min(moveStart.y2 + moveY, cropperPosition.y1 + settings.cropperScaledMaxHeight), cropperPosition.y1 + settings.cropperScaledMinHeight);\n          break;\n\n        case 'bottom':\n          cropperPosition.y2 = Math.max(Math.min(moveStart.y2 + moveY, cropperPosition.y1 + settings.cropperScaledMaxHeight), cropperPosition.y1 + settings.cropperScaledMinHeight);\n          break;\n\n        case 'bottomleft':\n          cropperPosition.x1 = Math.min(Math.max(moveStart.x1 + moveX, cropperPosition.x2 - settings.cropperScaledMaxWidth), cropperPosition.x2 - settings.cropperScaledMinWidth);\n          cropperPosition.y2 = Math.max(Math.min(moveStart.y2 + moveY, cropperPosition.y1 + settings.cropperScaledMaxHeight), cropperPosition.y1 + settings.cropperScaledMinHeight);\n          break;\n\n        case 'center':\n          const scale = event.scale;\n          const newWidth = Math.min(Math.max(settings.cropperScaledMinWidth, Math.abs(moveStart.x2 - moveStart.x1) * scale), settings.cropperScaledMaxWidth);\n          const newHeight = Math.min(Math.max(settings.cropperScaledMinHeight, Math.abs(moveStart.y2 - moveStart.y1) * scale), settings.cropperScaledMaxHeight);\n          cropperPosition.x1 = moveStart.clientX - newWidth / 2;\n          cropperPosition.x2 = moveStart.clientX + newWidth / 2;\n          cropperPosition.y1 = moveStart.clientY - newHeight / 2;\n          cropperPosition.y2 = moveStart.clientY + newHeight / 2;\n\n          if (cropperPosition.x1 < 0) {\n            cropperPosition.x2 -= cropperPosition.x1;\n            cropperPosition.x1 = 0;\n          } else if (cropperPosition.x2 > maxSize.width) {\n            cropperPosition.x1 -= cropperPosition.x2 - maxSize.width;\n            cropperPosition.x2 = maxSize.width;\n          }\n\n          if (cropperPosition.y1 < 0) {\n            cropperPosition.y2 -= cropperPosition.y1;\n            cropperPosition.y1 = 0;\n          } else if (cropperPosition.y2 > maxSize.height) {\n            cropperPosition.y1 -= cropperPosition.y2 - maxSize.height;\n            cropperPosition.y2 = maxSize.height;\n          }\n\n          break;\n      }\n\n      if (settings.maintainAspectRatio) {\n        this.checkAspectRatio(moveStart.position, cropperPosition, maxSize, settings);\n      }\n    }\n\n    checkAspectRatio(position, cropperPosition, maxSize, settings) {\n      let overflowX = 0;\n      let overflowY = 0;\n\n      switch (position) {\n        case 'top':\n          cropperPosition.x2 = cropperPosition.x1 + (cropperPosition.y2 - cropperPosition.y1) * settings.aspectRatio;\n          overflowX = Math.max(cropperPosition.x2 - maxSize.width, 0);\n          overflowY = Math.max(0 - cropperPosition.y1, 0);\n\n          if (overflowX > 0 || overflowY > 0) {\n            cropperPosition.x2 -= overflowY * settings.aspectRatio > overflowX ? overflowY * settings.aspectRatio : overflowX;\n            cropperPosition.y1 += overflowY * settings.aspectRatio > overflowX ? overflowY : overflowX / settings.aspectRatio;\n          }\n\n          break;\n\n        case 'bottom':\n          cropperPosition.x2 = cropperPosition.x1 + (cropperPosition.y2 - cropperPosition.y1) * settings.aspectRatio;\n          overflowX = Math.max(cropperPosition.x2 - maxSize.width, 0);\n          overflowY = Math.max(cropperPosition.y2 - maxSize.height, 0);\n\n          if (overflowX > 0 || overflowY > 0) {\n            cropperPosition.x2 -= overflowY * settings.aspectRatio > overflowX ? overflowY * settings.aspectRatio : overflowX;\n            cropperPosition.y2 -= overflowY * settings.aspectRatio > overflowX ? overflowY : overflowX / settings.aspectRatio;\n          }\n\n          break;\n\n        case 'topleft':\n          cropperPosition.y1 = cropperPosition.y2 - (cropperPosition.x2 - cropperPosition.x1) / settings.aspectRatio;\n          overflowX = Math.max(0 - cropperPosition.x1, 0);\n          overflowY = Math.max(0 - cropperPosition.y1, 0);\n\n          if (overflowX > 0 || overflowY > 0) {\n            cropperPosition.x1 += overflowY * settings.aspectRatio > overflowX ? overflowY * settings.aspectRatio : overflowX;\n            cropperPosition.y1 += overflowY * settings.aspectRatio > overflowX ? overflowY : overflowX / settings.aspectRatio;\n          }\n\n          break;\n\n        case 'topright':\n          cropperPosition.y1 = cropperPosition.y2 - (cropperPosition.x2 - cropperPosition.x1) / settings.aspectRatio;\n          overflowX = Math.max(cropperPosition.x2 - maxSize.width, 0);\n          overflowY = Math.max(0 - cropperPosition.y1, 0);\n\n          if (overflowX > 0 || overflowY > 0) {\n            cropperPosition.x2 -= overflowY * settings.aspectRatio > overflowX ? overflowY * settings.aspectRatio : overflowX;\n            cropperPosition.y1 += overflowY * settings.aspectRatio > overflowX ? overflowY : overflowX / settings.aspectRatio;\n          }\n\n          break;\n\n        case 'right':\n        case 'bottomright':\n          cropperPosition.y2 = cropperPosition.y1 + (cropperPosition.x2 - cropperPosition.x1) / settings.aspectRatio;\n          overflowX = Math.max(cropperPosition.x2 - maxSize.width, 0);\n          overflowY = Math.max(cropperPosition.y2 - maxSize.height, 0);\n\n          if (overflowX > 0 || overflowY > 0) {\n            cropperPosition.x2 -= overflowY * settings.aspectRatio > overflowX ? overflowY * settings.aspectRatio : overflowX;\n            cropperPosition.y2 -= overflowY * settings.aspectRatio > overflowX ? overflowY : overflowX / settings.aspectRatio;\n          }\n\n          break;\n\n        case 'left':\n        case 'bottomleft':\n          cropperPosition.y2 = cropperPosition.y1 + (cropperPosition.x2 - cropperPosition.x1) / settings.aspectRatio;\n          overflowX = Math.max(0 - cropperPosition.x1, 0);\n          overflowY = Math.max(cropperPosition.y2 - maxSize.height, 0);\n\n          if (overflowX > 0 || overflowY > 0) {\n            cropperPosition.x1 += overflowY * settings.aspectRatio > overflowX ? overflowY * settings.aspectRatio : overflowX;\n            cropperPosition.y2 -= overflowY * settings.aspectRatio > overflowX ? overflowY : overflowX / settings.aspectRatio;\n          }\n\n          break;\n\n        case 'center':\n          cropperPosition.x2 = cropperPosition.x1 + (cropperPosition.y2 - cropperPosition.y1) * settings.aspectRatio;\n          cropperPosition.y2 = cropperPosition.y1 + (cropperPosition.x2 - cropperPosition.x1) / settings.aspectRatio;\n          const overflowX1 = Math.max(0 - cropperPosition.x1, 0);\n          const overflowX2 = Math.max(cropperPosition.x2 - maxSize.width, 0);\n          const overflowY1 = Math.max(cropperPosition.y2 - maxSize.height, 0);\n          const overflowY2 = Math.max(0 - cropperPosition.y1, 0);\n\n          if (overflowX1 > 0 || overflowX2 > 0 || overflowY1 > 0 || overflowY2 > 0) {\n            cropperPosition.x1 += overflowY1 * settings.aspectRatio > overflowX1 ? overflowY1 * settings.aspectRatio : overflowX1;\n            cropperPosition.x2 -= overflowY2 * settings.aspectRatio > overflowX2 ? overflowY2 * settings.aspectRatio : overflowX2;\n            cropperPosition.y1 += overflowY2 * settings.aspectRatio > overflowX2 ? overflowY2 : overflowX2 / settings.aspectRatio;\n            cropperPosition.y2 -= overflowY1 * settings.aspectRatio > overflowX1 ? overflowY1 : overflowX1 / settings.aspectRatio;\n          }\n\n          break;\n      }\n    }\n\n    getClientX(event) {\n      var _a;\n\n      return ((_a = event.touches) === null || _a === void 0 ? void 0 : _a[0].clientX) || event.clientX || 0;\n    }\n\n    getClientY(event) {\n      var _a;\n\n      return ((_a = event.touches) === null || _a === void 0 ? void 0 : _a[0].clientY) || event.clientY || 0;\n    }\n\n  }\n\n  CropperPositionService.ɵfac = function CropperPositionService_Factory(t) {\n    return new (t || CropperPositionService)();\n  };\n\n  CropperPositionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CropperPositionService,\n    factory: CropperPositionService.ɵfac,\n    providedIn: 'root'\n  });\n  return CropperPositionService;\n})();","map":null,"metadata":{},"sourceType":"module"}