{"ast":null,"code":"export class CropperSettings {\n  constructor() {\n    // From options\n    this.format = 'png';\n    this.maintainAspectRatio = true;\n    this.transform = {};\n    this.aspectRatio = 1;\n    this.resizeToWidth = 0;\n    this.resizeToHeight = 0;\n    this.cropperMinWidth = 0;\n    this.cropperMinHeight = 0;\n    this.cropperMaxHeight = 0;\n    this.cropperMaxWidth = 0;\n    this.cropperStaticWidth = 0;\n    this.cropperStaticHeight = 0;\n    this.canvasRotation = 0;\n    this.initialStepSize = 3;\n    this.roundCropper = false;\n    this.onlyScaleDown = false;\n    this.imageQuality = 92;\n    this.autoCrop = true;\n    this.backgroundColor = null;\n    this.containWithinAspectRatio = false;\n    this.hideResizeSquares = false;\n    this.alignImage = 'center'; // Internal\n\n    this.cropperScaledMinWidth = 20;\n    this.cropperScaledMinHeight = 20;\n    this.cropperScaledMaxWidth = 20;\n    this.cropperScaledMaxHeight = 20;\n    this.stepSize = this.initialStepSize;\n  }\n\n  setOptions(options) {\n    Object.keys(options).filter(k => k in this).forEach(k => this[k] = options[k]);\n    this.validateOptions();\n  }\n\n  setOptionsFromChanges(changes) {\n    Object.keys(changes).filter(k => k in this).forEach(k => this[k] = changes[k].currentValue);\n    this.validateOptions();\n  }\n\n  validateOptions() {\n    if (this.maintainAspectRatio && !this.aspectRatio) {\n      throw new Error('`aspectRatio` should > 0 when `maintainAspectRatio` is enabled');\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}